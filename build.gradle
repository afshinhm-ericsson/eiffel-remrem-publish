buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.4.1.RELEASE")
        classpath 'org.github.ngbinh.scalastyle:gradle-scalastyle-plugin_2.11:0.8.2'
    }
}

// Apply the java plugin to add support for Java
plugins {
    id 'java'
    id 'scala'
    id 'idea'
    id 'war'
    id 'maven'
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.6.3'
}

war {
    baseName = 'remrem-publish'
    version =  '0.2.6'
}

apply plugin: 'spring-boot'
apply plugin: 'java'
apply plugin: 'eclipse'

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
        html.destination "${buildDir}/jacocoHtml"
    }
    executionData = files('build/jacoco/jacocoTest.exec', 'build/jacoco/test.exec')
}

configurations {
    providedRuntime
    provided

    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

install.dependsOn assemble


// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
    maven {
        url 'https://jitpack.io'
    }
}

ext {
    sprintBootVersion = "1.4.1.RELEASE"
}

task wrapper(type: Wrapper) {
  gradleVersion = '3.1'
  distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}

task integrationTest(type: Test) {
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpFile = file("$buildDir/classes/integrationTest")
    }

    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

// In this section you declare the dependencies for your production and test code
dependencies {
    compile('com.jayway.restassured:rest-assured:2.9.0')
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.21'
    compile("org.springframework.boot:spring-boot-starter-web:$sprintBootVersion") {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    }
    compile "org.springframework.boot:spring-boot-starter-actuator:$sprintBootVersion"
    compile "org.springframework.boot:spring-boot:$sprintBootVersion"
    compile 'com.rabbitmq:amqp-client:3.5.7'
    compile 'com.google.code.gson:gson:2.6.2'
    compile 'javax.inject:javax.inject:1'

    //commons CLI
    compile 'commons-cli:commons-cli:1.3.1'

    //Authentication
    compile("org.springframework.boot:spring-boot-starter-security:$sprintBootVersion")
    compile("org.springframework.security:spring-security-ldap:4.1.3.RELEASE")
    compile("org.apache.directory.server:apacheds-server-jndi:1.5.5")

    //ServletException requires compile time servlet dependency but it causes problems
    //when deployed if exist on war run time.. hence provided but also compileOnly
    compileOnly("org.springframework.boot:spring-boot-starter-tomcat")
    providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")
    testCompile("org.springframework.boot:spring-boot-starter-tomcat")

    compile 'io.springfox:springfox-swagger2:2.4.0'
    compile 'io.springfox:springfox-swagger-ui:2.4.0'
    
    //Injectable Message Library and its Implementation
    compile 'com.github.Ericsson:eiffel-remrem-shared:0.2.0'
    compile 'com.github.Ericsson:eiffel-remrem-protocol-interface:0.0.1'
    compile ('com.github.Ericsson:eiffel-remrem-semantics:0.1.9')
    
    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
    testCompile 'org.assertj:assertj-core:3.4.1'
    testCompile "org.springframework.boot:spring-boot-starter-test:$sprintBootVersion"
    testCompile 'com.jayway.jsonpath:json-path-assert:2.2.0'
}